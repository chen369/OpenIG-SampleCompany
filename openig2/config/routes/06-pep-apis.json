{
  "baseURI": "http://apis.example.net:8010",
  "handler": {
    "comment": "OpenAM chain for authentication and authorization check",
    "name": "OpenAM Chain",
    "type": "Chain",
    "config": {
      "filters": [
        {
          "comment": "Scripted filter for OpenAM basic authentication",
          "name": "OpenAM Basic Authentication",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "OpenAMBasicAuthFilter.groovy",
            "args": {
              "userId": "${request.headers['X-OpenAM-Username'][0]}",
              "password": "${request.headers['X-OpenAM-Password'][0]}",
              "openamUrl": "http://openam.example.com:18080/openam/json/employees"
            }
          },
          "capture": "all"
        },
        {
          "comment": "(Optional) Access Denied check filter",
          "name": "Access Denied check filter",
          "type": "SwitchFilter",
          "config": {
            "onResponse": [
              {
                "condition": "${response.status.code == 401}",
                "handler": {
                  "name": "AccessDeniedHandler",
                  "type": "StaticResponseHandler",
                  "config": {
                    "status": 403,
                    "reason": "Forbidden",
                    "headers": {
                      "Content-Type": [
                        "application/json; charset=utf-8"
                      ]
                    },
                    "entity": "{\"code\": 403,\"reason\":\"Forbidden\",\"message\":\"Authorization Failed\"}"
                  }
                },
                "capture": "all"
              }
            ]
          },
          "capture": "all"
        },
        {
          "comment": "OpenAM Authorization check filter",
          "name": "OpenAM Authorization",
          "type": "PolicyEnforcementFilter",
          "config": {
            "openamUrl": "http://openam.example.com:18080/openam",
            "pepUsername": "policyAdmin",
            "pepPassword": "Passw0rd",
            "realm": "employees",
            "application": "OpenIG2",
            "ssoTokenSubject": "${attributes.tokenId}"
          },
          "capture": "all"
        }
        // (Optional) Can add additional filters to inject user attributes in HTTP headers
      ],
      "handler": "ClientHandler"
    }
  },
  "condition": "${matches(request.uri.path, '^/txHistory')}"
}